package pl.edu.pjwstk.chemcalc.code.parser;

import pl.edu.pjwstk.chemcalc.code.ast.terminal.IntegerTerminal;
import pl.edu.pjwstk.chemcalc.code.ast.terminal.StringTerminal;
import pl.edu.pjwstk.chemcalc.code.ast.unary.ElementExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.BracketExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.ChemicalFormulaExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.CompoundExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.FormulaExpression;
import pl.edu.pjwstk.chemcalc.code.ast.Expression;

import pl.edu.pjwstk.chemcalc.code.lexer.Lexer;

import java.io.StringReader;
import java_cup.runtime.DefaultSymbolFactory;


parser code {: 
    public Lexer lexer;
    private String expr;
    public Expression RESULT;
    
    public ChemcalcParser(String expr) {
        this.symbolFactory = new DefaultSymbolFactory();   
        this.expr = expr;
    }
    
    void setResult(Expression exp) {
        this.RESULT = exp;
    }
:};

init with {: lexer = new Lexer(new StringReader(expr)); :};
scan with {: return lexer.next_token(); :};

terminal String LOW_INDEX;
terminal String OP;

terminal Integer INTEGER_LITERAL;

terminal String ELEMENT_EXPRESSION;

terminal String LEFT_BRACKET;
terminal String RIGHT_BRACKET;

non terminal Expression ele_expr;
non terminal Expression cmp_expr;
non terminal Expression chfm_expr;
non terminal Expression bchfm_expr;
non terminal Expression fm_expr;
non terminal Expression lfm_expr;
non terminal Expression rfm_expr;
non terminal Expression bfm_expr;
non terminal Expression goal;

precedence left LOW_INDEX;
precedence left OP;
//precedence left INTEGER_LITERAL;
//precedence left ELEMENT_EXPRESSION;
precedence left LEFT_BRACKET, RIGHT_BRACKET;

start with goal;


ele_expr   ::=
                                                                             ELEMENT_EXPRESSION:e1    {: RESULT = new ElementExpression(new StringTerminal(e1));                :}
        ;
cmp_expr   ::=
                                                                                       ele_expr:e1    {: RESULT = e1;                                                           :}
        |                                                           ele_expr:e1 INTEGER_LITERAL:i1    {: RESULT = new CompoundExpression(e1, new IntegerTerminal((Integer)i1)); :}
        |                                              ele_expr:e1 LOW_INDEX:l1 INTEGER_LITERAL:i1    {: RESULT = new CompoundExpression(e1, new IntegerTerminal((Integer)i1)); :}
        ;
chfm_expr  ::=
                                                                                       cmp_expr:c1    {: RESULT = c1;                                                           :}
        |                                                                 cmp_expr:c1 chfm_expr:cf1   {: RESULT = new ChemicalFormulaExpression(c1, cf1);                       :}
        ;
bchfm_expr ::=
                                                   LEFT_BRACKET:lb1 chfm_expr:cf1 RIGHT_BRACKET:rb1   {: RESULT = new BracketExpression(cf1, new IntegerTerminal(1));           :}
        |                      LEFT_BRACKET:lb1 chfm_expr:cf1 RIGHT_BRACKET:rb1 INTEGER_LITERAL:i1    {: RESULT = new BracketExpression(cf1, new IntegerTerminal((Integer)i1)); :}
        |         LEFT_BRACKET:lb1 chfm_expr:cf1 RIGHT_BRACKET:rb1 LOW_INDEX:l1 INTEGER_LITERAL:i1    {: RESULT = new BracketExpression(cf1, new IntegerTerminal((Integer)i1)); :}
        ;
lfm_expr   ::=
                                                                                      chfm_expr:cf1   {: RESULT = cf1;                                                          :}
        |                                                                chfm_expr:cf1 rfm_expr:rf1   {: RESULT = new FormulaExpression(cf1, rf1);                              :}
        // this is the most wired part which solves problems with bi-directional interpretation of the number, i.e.: H2(2O) is it H-2(2O) or H2-(2O)?                             
        |                               chfm_expr:cf1 LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1   {: RESULT = new FormulaExpression(
                                                                                                                      new ChemicalFormulaExpression(
                                                                                                                          cf1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      new BracketExpression(
                                                                                                                          f1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      :}
        |            chfm_expr:cf1 LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1 INTEGER_LITERAL:i1   {: RESULT = new FormulaExpression(
                                                                                                                      new ChemicalFormulaExpression(
                                                                                                                          cf1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      new BracketExpression(
                                                                                                                          f1,
                                                                                                                          new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      :}
        | chfm_expr:cf1 LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1 LOW_INDEX:l1 INTEGER_LITERAL:i1 {: RESULT = new FormulaExpression(
                                                                                                                      new ChemicalFormulaExpression(
                                                                                                                          cf1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      new BracketExpression(
                                                                                                                          f1,
                                                                                                                          new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      :}
        ;
rfm_expr   ::=
                                                                                     bchfm_expr:bcf1  {: RESULT = bcf1;                                                         :}
        |                                                              bchfm_expr:bcf1 bfm_expr:bf1   {: RESULT = new FormulaExpression(bcf1, bf1);                             :}
        |                                                              bchfm_expr:bcf1 lfm_expr:lf1   {: RESULT = new FormulaExpression(bcf1, lf1);                             :}
        ;
bfm_expr   ::=
                                                                                     bchfm_expr:bcf1  {: RESULT = bcf1;                                                         :}
        |                                                              bchfm_expr:bcf1 lfm_expr:lf1   {: RESULT = new FormulaExpression(bcf1, lf1);                             :}
        ;
fm_expr    ::=
                                                                                       lfm_expr:lf1   {: RESULT = lf1;                                                          :}
        |                                                                              rfm_expr:rf1   {: RESULT = rf1;                                                          :}
        |                                                            INTEGER_LITERAL:i1 fm_expr:f1    {: RESULT = new FormulaExpression(new IntegerTerminal((Integer)i1), f1);  :}
        |                                                              fm_expr:f1 OP:o1 fm_expr:f2    {: RESULT = new FormulaExpression(f1, f2);                                :}
        |                                             LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1   {: RESULT = new BracketExpression(f1, new IntegerTerminal(1));            :}
        |                         LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1 INTEGER_LITERAL:i1    {: RESULT = new BracketExpression(f1, new IntegerTerminal((Integer)i1));  :}
        |            LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1 LOW_INDEX:l1 INTEGER_LITERAL:i1    {: RESULT = new BracketExpression(f1, new IntegerTerminal((Integer)i1));  :}
        // this is the wired part which works fine but I do not know exactly why 
        |                                 LEFT_BRACKET:lb1 fm_expr:f1 RIGHT_BRACKET:rb1 fm_expr:f2    {: RESULT = new FormulaExpression(
                                                                                                                      new BracketExpression(
                                                                                                                          f1, new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      f2
                                                                                                                  );
                                                                                                      :}
        // end of wired part which should not be removed
        |                                  fm_expr:f1 LEFT_BRACKET:lb1 fm_expr:f2 RIGHT_BRACKET:rb1   {: RESULT = new FormulaExpression(
                                                                                                                      f1,
                                                                                                                      new BracketExpression(f2, new IntegerTerminal(1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      :}
        |              fm_expr:f1 LEFT_BRACKET:lb1 fm_expr:f2 RIGHT_BRACKET:rb1 INTEGER_LITERAL:i1    {: RESULT = new FormulaExpression(
                                                                                                                      f1,
                                                                                                                      new BracketExpression(f2, new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      :}
        | fm_expr:f1 LEFT_BRACKET:lb1 fm_expr:f2 RIGHT_BRACKET:rb1 LOW_INDEX:l1 INTEGER_LITERAL:i1    {: RESULT = new FormulaExpression(
                                                                                                                      f1,
                                                                                                                      new BracketExpression(f2, new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      :}
        ;
goal       ::=
                                                                                        fm_expr:e     {: RESULT = e; parser.setResult(e);                                       :}
        ;