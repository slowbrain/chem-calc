
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jan 26 16:11:44 CET 2014
//----------------------------------------------------

package pl.edu.pjwstk.chemcalc.code.parser;

import pl.edu.pjwstk.chemcalc.code.ast.terminal.IntegerTerminal;
import pl.edu.pjwstk.chemcalc.code.ast.terminal.StringTerminal;
import pl.edu.pjwstk.chemcalc.code.ast.unary.ElementExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.BracketExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.ChemicalFormulaExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.CompoundExpression;
import pl.edu.pjwstk.chemcalc.code.ast.binary.FormulaExpression;
import pl.edu.pjwstk.chemcalc.code.ast.Expression;
import pl.edu.pjwstk.chemcalc.code.lexer.Lexer;
import java.io.StringReader;
import java_cup.runtime.DefaultSymbolFactory;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jan 26 16:11:44 CET 2014
  */
public class ChemcalcParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ChemcalcParser() {super();}

  /** Constructor which sets the default scanner. */
  public ChemcalcParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ChemcalcParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\004\000\002\003\005\000\002\004\003" +
    "\000\002\004\004\000\002\005\005\000\002\005\006\000" +
    "\002\005\007\000\002\007\003\000\002\007\004\000\002" +
    "\007\006\000\002\007\007\000\002\007\010\000\002\010" +
    "\003\000\002\010\004\000\002\010\004\000\002\011\003" +
    "\000\002\011\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\004\000\002\006\005\000\002\006\005\000\002" +
    "\006\006\000\002\006\007\000\002\006\006\000\002\006" +
    "\006\000\002\006\007\000\002\006\010\000\002\012\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\010\006\015\007\007\010\011\001\002\000" +
    "\014\002\ufffc\005\ufffc\007\007\010\ufffc\011\ufffc\001\002" +
    "\000\010\002\uffe2\005\020\010\021\001\002\000\012\002" +
    "\ufff7\005\ufff7\010\040\011\ufff7\001\002\000\020\002\000" +
    "\004\000\005\000\006\000\007\000\010\000\011\000\001" +
    "\002\000\014\002\ufff2\005\ufff2\007\007\010\057\011\ufff2" +
    "\001\002\000\010\006\015\007\007\010\011\001\002\000" +
    "\004\002\033\001\002\000\020\002\uffff\004\031\005\uffff" +
    "\006\030\007\uffff\010\uffff\011\uffff\001\002\000\012\002" +
    "\uffec\005\uffec\010\uffec\011\uffec\001\002\000\010\006\015" +
    "\007\007\010\011\001\002\000\012\002\uffed\005\uffed\010" +
    "\uffed\011\uffed\001\002\000\012\002\uffeb\005\020\010\021" +
    "\011\uffeb\001\002\000\010\006\015\007\007\010\011\001" +
    "\002\000\010\006\015\007\007\010\011\001\002\000\010" +
    "\005\020\010\021\011\023\001\002\000\016\002\uffe5\004" +
    "\025\005\uffe5\006\024\010\uffe5\011\uffe5\001\002\000\012" +
    "\002\uffe4\005\uffe4\010\uffe4\011\uffe4\001\002\000\004\006" +
    "\026\001\002\000\012\002\uffe3\005\uffe3\010\uffe3\011\uffe3" +
    "\001\002\000\012\002\uffea\005\uffea\010\021\011\uffea\001" +
    "\002\000\014\002\ufffe\005\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\001\002\000\004\006\032\001\002\000\014\002\ufffd\005" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\001\002\000\004\002\001" +
    "\001\002\000\010\005\020\010\021\011\051\001\002\000" +
    "\010\005\ufff7\010\040\011\036\001\002\000\020\002\ufffa" +
    "\004\047\005\ufffa\006\046\007\ufffa\010\ufffa\011\ufffa\001" +
    "\002\000\012\002\ufff6\005\ufff6\010\ufff6\011\ufff6\001\002" +
    "\000\010\006\015\007\007\010\011\001\002\000\010\005" +
    "\020\010\021\011\042\001\002\000\016\002\ufff5\004\044" +
    "\005\ufff5\006\043\010\ufff5\011\ufff5\001\002\000\012\002" +
    "\ufff4\005\ufff4\010\ufff4\011\ufff4\001\002\000\004\006\045" +
    "\001\002\000\012\002\ufff3\005\ufff3\010\ufff3\011\ufff3\001" +
    "\002\000\014\002\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\001\002\000\004\006\050\001\002\000\014\002\ufff8\005" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\001\002\000\020\002\uffe9" +
    "\004\052\005\uffe9\006\054\007\007\010\uffe9\011\uffe9\001" +
    "\002\000\004\006\055\001\002\000\012\002\uffe6\005\uffe6" +
    "\010\uffe6\011\uffe6\001\002\000\016\002\uffe8\005\uffe8\006" +
    "\015\007\007\010\011\011\uffe8\001\002\000\012\002\uffe7" +
    "\005\uffe7\010\uffe7\011\uffe7\001\002\000\012\002\ufff0\005" +
    "\ufff0\010\ufff0\011\ufff0\001\002\000\004\007\007\001\002" +
    "\000\014\002\uffef\005\uffef\007\007\010\uffef\011\uffef\001" +
    "\002\000\012\002\ufff1\005\ufff1\010\ufff1\011\ufff1\001\002" +
    "\000\012\002\uffee\005\uffee\010\uffee\011\uffee\001\002\000" +
    "\004\011\036\001\002\000\012\002\ufffb\005\ufffb\010\ufffb" +
    "\011\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\062\000\022\002\012\003\003\004\005\005\007\006" +
    "\004\007\015\010\013\012\011\001\001\000\010\002\012" +
    "\003\003\004\063\001\001\000\002\001\001\000\006\005" +
    "\007\010\036\001\001\000\002\001\001\000\016\002\012" +
    "\003\003\004\005\005\057\007\055\011\060\001\001\000" +
    "\020\002\012\003\003\004\034\005\007\006\033\007\015" +
    "\010\013\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\012\003\003\004\005\005\007" +
    "\006\016\007\015\010\013\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\002\012\003\003\004\005\005\007" +
    "\006\026\007\015\010\013\001\001\000\020\002\012\003" +
    "\003\004\005\005\007\006\021\007\015\010\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\005\007\010\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\002\012\003" +
    "\003\004\034\005\007\006\040\007\015\010\013\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\012\003\003\004" +
    "\005\005\007\006\052\007\015\010\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\020\002\012\003\003\004" +
    "\005\005\007\006\016\007\015\010\013\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\012\003\003\004" +
    "\062\001\001\000\012\002\012\003\003\004\005\007\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ChemcalcParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ChemcalcParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ChemcalcParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 lexer = new Lexer(new StringReader(expr)); 
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }

 
    public Lexer lexer;
    private String expr;
    public Expression RESULT;
    
    public ChemcalcParser(String expr) {
        this.symbolFactory = new DefaultSymbolFactory();   
        this.expr = expr;
    }
    
    void setResult(Expression exp) {
        this.RESULT = exp;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ChemcalcParser$actions {
  private final ChemcalcParser parser;

  /** Constructor */
  CUP$ChemcalcParser$actions(ChemcalcParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ChemcalcParser$do_action(
    int                        CUP$ChemcalcParser$act_num,
    java_cup.runtime.lr_parser CUP$ChemcalcParser$parser,
    java.util.Stack            CUP$ChemcalcParser$stack,
    int                        CUP$ChemcalcParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ChemcalcParser$result;

      /* select the action based on the action number */
      switch (CUP$ChemcalcParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // goal ::= fm_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = e; parser.setResult(e);                                       
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("goal",8, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // fm_expr ::= fm_expr LEFT_BRACKET fm_expr RIGHT_BRACKET LOW_INDEX INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)).value;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		Expression f2 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      f1,
                                                                                                                      new BracketExpression(f2, new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // fm_expr ::= fm_expr LEFT_BRACKET fm_expr RIGHT_BRACKET INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).value;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression f2 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      f1,
                                                                                                                      new BracketExpression(f2, new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // fm_expr ::= fm_expr LEFT_BRACKET fm_expr RIGHT_BRACKET 
            {
              Expression RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression f2 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      f1,
                                                                                                                      new BracketExpression(f2, new IntegerTerminal(1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // fm_expr ::= LEFT_BRACKET fm_expr RIGHT_BRACKET fm_expr 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression f2 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      new BracketExpression(
                                                                                                                          f1, new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      f2
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // fm_expr ::= LEFT_BRACKET fm_expr RIGHT_BRACKET LOW_INDEX INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new BracketExpression(f1, new IntegerTerminal((Integer)i1));  
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // fm_expr ::= LEFT_BRACKET fm_expr RIGHT_BRACKET INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new BracketExpression(f1, new IntegerTerminal((Integer)i1));  
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // fm_expr ::= LEFT_BRACKET fm_expr RIGHT_BRACKET 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new BracketExpression(f1, new IntegerTerminal(1));            
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // fm_expr ::= fm_expr OP fm_expr 
            {
              Expression RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int o1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String o1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression f2 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(f1, f2);                                
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // fm_expr ::= INTEGER_LITERAL fm_expr 
            {
              Expression RESULT =null;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(new IntegerTerminal((Integer)i1), f1);  
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fm_expr ::= rfm_expr 
            {
              Expression RESULT =null;
		int rf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int rf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression rf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = rf1;                                                          
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // fm_expr ::= lfm_expr 
            {
              Expression RESULT =null;
		int lf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int lf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression lf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = lf1;                                                          
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("fm_expr",4, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bfm_expr ::= bchfm_expr lfm_expr 
            {
              Expression RESULT =null;
		int bcf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int bcf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression bcf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int lf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int lf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression lf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(bcf1, lf1);                             
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("bfm_expr",7, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bfm_expr ::= bchfm_expr 
            {
              Expression RESULT =null;
		int bcf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int bcf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression bcf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = bcf1;                                                         
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("bfm_expr",7, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // rfm_expr ::= bchfm_expr lfm_expr 
            {
              Expression RESULT =null;
		int bcf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int bcf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression bcf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int lf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int lf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression lf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(bcf1, lf1);                             
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("rfm_expr",6, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // rfm_expr ::= bchfm_expr bfm_expr 
            {
              Expression RESULT =null;
		int bcf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int bcf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression bcf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int bf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int bf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression bf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(bcf1, bf1);                             
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("rfm_expr",6, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // rfm_expr ::= bchfm_expr 
            {
              Expression RESULT =null;
		int bcf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int bcf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression bcf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = bcf1;                                                         
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("rfm_expr",6, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // lfm_expr ::= chfm_expr LEFT_BRACKET fm_expr RIGHT_BRACKET LOW_INDEX INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)).value;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      new ChemicalFormulaExpression(
                                                                                                                          cf1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      new BracketExpression(
                                                                                                                          f1,
                                                                                                                          new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("lfm_expr",5, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-5)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // lfm_expr ::= chfm_expr LEFT_BRACKET fm_expr RIGHT_BRACKET INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).value;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      new ChemicalFormulaExpression(
                                                                                                                          cf1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      new BracketExpression(
                                                                                                                          f1,
                                                                                                                          new IntegerTerminal((Integer)i1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("lfm_expr",5, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // lfm_expr ::= chfm_expr LEFT_BRACKET fm_expr RIGHT_BRACKET 
            {
              Expression RESULT =null;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression f1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(
                                                                                                                      new ChemicalFormulaExpression(
                                                                                                                          cf1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      ),
                                                                                                                      new BracketExpression(
                                                                                                                          f1,
                                                                                                                          new IntegerTerminal(1)
                                                                                                                      )
                                                                                                                  );
                                                                                                      
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("lfm_expr",5, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // lfm_expr ::= chfm_expr rfm_expr 
            {
              Expression RESULT =null;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int rf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int rf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression rf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new FormulaExpression(cf1, rf1);                              
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("lfm_expr",5, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // lfm_expr ::= chfm_expr 
            {
              Expression RESULT =null;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = cf1;                                                          
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("lfm_expr",5, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // bchfm_expr ::= LEFT_BRACKET chfm_expr RIGHT_BRACKET LOW_INDEX INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new BracketExpression(cf1, new IntegerTerminal((Integer)i1)); 
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("bchfm_expr",3, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-4)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // bchfm_expr ::= LEFT_BRACKET chfm_expr RIGHT_BRACKET INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new BracketExpression(cf1, new IntegerTerminal((Integer)i1)); 
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("bchfm_expr",3, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-3)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // bchfm_expr ::= LEFT_BRACKET chfm_expr RIGHT_BRACKET 
            {
              Expression RESULT =null;
		int lb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int lb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		String lb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int rb1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int rb1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		String rb1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new BracketExpression(cf1, new IntegerTerminal(1));           
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("bchfm_expr",3, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // chfm_expr ::= cmp_expr chfm_expr 
            {
              Expression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression c1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int cf1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int cf1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression cf1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new ChemicalFormulaExpression(c1, cf1);                       
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("chfm_expr",2, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // chfm_expr ::= cmp_expr 
            {
              Expression RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression c1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = c1;                                                           
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("chfm_expr",2, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // cmp_expr ::= ele_expr LOW_INDEX INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		String l1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new CompoundExpression(e1, new IntegerTerminal((Integer)i1)); 
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("cmp_expr",1, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-2)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // cmp_expr ::= ele_expr INTEGER_LITERAL 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		int i1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Integer i1 = (Integer)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new CompoundExpression(e1, new IntegerTerminal((Integer)i1)); 
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("cmp_expr",1, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // cmp_expr ::= ele_expr 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = e1;                                                           
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("cmp_expr",1, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ele_expr ::= ELEMENT_EXPRESSION 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.peek()).value;
		 RESULT = new ElementExpression(new StringTerminal(e1));                
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("ele_expr",0, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          return CUP$ChemcalcParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)).value;
		RESULT = start_val;
              CUP$ChemcalcParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.elementAt(CUP$ChemcalcParser$top-1)), ((java_cup.runtime.Symbol)CUP$ChemcalcParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ChemcalcParser$parser.done_parsing();
          return CUP$ChemcalcParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

